plan_goal_task:
  description: >
    Break the user's goal of '{goal}' into 7 or fewer actionable tasks.
    Your final output must be a single JSON object with a 'tasks' key 
    holding the list of task objects you create.
  expected_output: >
    A JSON object containing a 'tasks' list and an 'assumptions' list.
  agent: GoalPlannerAgent

estimate_time_task:
  description: >
    You will receive a JSON object from the planning step. Add a 'time_hours' key 
    (using 0.25-hour granularity) to each task object within the 'tasks' list.
  expected_output: >
    The complete JSON object, now with 'time_hours' added to each task.
  agent: TimeAnalyzerAgent
  context:
    - plan_goal_task

assign_impact_task:
  description: >
    You will receive a JSON object that already includes time estimates. Add an 'impact_pct' key 
    and a 'rationale' key to each task object. The total impact should be approximately 100%.
  expected_output: >
    The complete JSON object, now with 'impact_pct' and 'rationale' added to each task.
  agent: ImpactAgent
  context:
    - estimate_time_task

prioritize_task:
  description: >
    You will receive a fully enriched JSON object. First, add a 'priority_score' to each task 
    using the formula: score = impact_pct / max(time_hours, 0.25). Second, sort the 'tasks' list 
    by this score in descending order.
  expected_output: >
    The final, sorted list of tasks as a single JSON object.
  agent: PrioritizerAgent
  context:
    - assign_impact_task

schedule_task:
  description: >
    Build a day-by-day schedule from the prioritized tasks. You must respect the daily
    capacity of {daily_capacity_hours} hours and add a {buffer_pct}% buffer to the time estimates.
    The schedule starts on {start_date}.
  expected_output: >
    A JSON timeline with a 'schedule' list and an optional 'warnings' list if capacity is exceeded.
  agent: SchedulerAgent
  context:
    - prioritize_task

monitor_task:
  description: >
    Review the generated schedule. Create reminders for today's top items starting at {first_reminder_time}.
    If the schedule produced any warnings, suggest specific adjustments.
  expected_output: >
    A JSON object with a 'reminders' list and an optional 'adjustments' list.
  agent: MonitorAgent
  context:
    - schedule_task